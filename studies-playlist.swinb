<div class="notebook">

<div class="nb-cell program" data-singleline="true" name="p2">
p(0, []).
p(X, [H|T]) :- p(N,T),X is N + H.

</div>

<div class="nb-cell query" name="q2">
p(Result, [1,2,3,4,5,6]).
</div>

<div class="nb-cell program" name="p1">
start :- write('Digite o valor de X:'),nl,
    read(X),nl,
    write(X),nl.
</div>

<div class="nb-cell query" name="q1">
start.
</div>

<div class="nb-cell program" name="p3">
aluno(joao,calc).
aluno(maria,calc).
aluno(joel,prog).
aluno(joel,est).
frequenta(joao,puc).
frequenta(maria,puc).
frequenta(joel,ufrj).
professor(carlos,calc).
professor(ana,est).
professor(pedro,prog).
funcionario(pedro,ufrj).
funcionario(carlos,puc).
funcionario(ana,puc).

alunos(A,X):-professor(X,Y),aluno(A,Y).
associados(P,F):-frequenta(P,F);funcionario(P,F).
</div>

<div class="nb-cell query" name="q7">

</div>

<div class="nb-cell query" name="q3">
associados(X,ufrj).
</div>

<div class="nb-cell program" name="p4">
:-dynamic mulher/1.
:-dynamic homem/1.
:-dynamic progenitor/2.
progenitor(maria,pedro).
progenitor(maria,ana).
progenitor(joao,pedro).
progenitor(joao,ana).
progenitor(ana,helena).
progenitor(ana,joana).
progenitor(pedro,mario).
progenitor(helena,carlos).
progenitor(mario,carlos).
mulher(maria).
mulher(ana).
mulher(helena).
mulher(joana).
homem(pedro).
homem(joao).
homem(mario).
homem(carlos). 

% assert/1 - acrescenta o fato/regra como ultimo item do predicado
% asserta/1 - acrescenta o fato/regra como primeiro item do predicado

% retract/1 - remove apenas primeiro fato da base
% retractall/1 - remove todos os fatos da base 
% abolish/1 - remove todos os fatos da base (predicados tb)
% abolish/2 - remove todos os fatos da base (predicado tb) mas
	% passando aridade separadamente
% descendente(X,Y) :- progenitor(Y,X).
% descendente(X,Y) :- progenitor(Y,A),progenitor(A,X).
% descendente(X,Y) :- progenitor(Y,A),progenitor(A,B),progenitor(B,X).

descendente(X,Y) :- progenitor(Y,X).
descendente(X,Y) :- progenitor(Y,W),descendente(X,W).
</div>

<div class="nb-cell query" name="q4">
listing(homem/1).
</div>

<div class="nb-cell query" name="q5">
asserta(homem(fred)),listing(homem/1).
</div>

<div class="nb-cell query" name="q6">
retract(homem(mario)),listing(homem/1).
</div>

<div class="nb-cell query" name="q8">
retractall(homem(X)),listing(homem/1).
</div>

<div class="nb-cell query" name="q15">
descendente(carlos,joao).
</div>

<div class="nb-cell program" data-singleline="true" name="p5">
:-dynamic sala/6.
sala(pas,dsa,10,13,sad,ewq).
sala(pas,dsa,10,13,sad,ewq).
sala(pas,dsa,14,13,sad,ewq).
sala(pas,dsa,10,13,sad,ewq).
sala(pas,dsa,15,13,sad,ewq).

</div>

<div class="nb-cell query" name="q9">
(sala(_,_,Ini,Fin,_,_),Ini &gt; Fin),
retractall(sala(_,_,Ini,Fin,_,_)),assert(sala(oiu,oiu,5,7,sad,p)),assert(sala(oiu,oiu,9,15,sad,p)),listing(sala/6).
</div>

<div class="nb-cell query" name="q10">
listing(sala/6).
</div>

<div class="nb-cell program" name="p6">
num:-read(X),
    (
    	(X&gt;100,write('Maior q 100'));
    	(X=&lt;100,write('Menor q 100'))
    ).
</div>

<div class="nb-cell query" name="q11">
num.
</div>

<div class="nb-cell program" name="p7">
nota(joao,5.0).
nota(maria,9.0).
nota(mariana,4.5).
nota(joaquim,6.0).
nota(cleuza,8.5).
nota(mara,4.0).
nota(joana,8.0).
nota(jose,6.5).
nota(mary,10.0).
status(A):-nota(A,X),
    (   
    	(X&lt;4.9,write('Reprovado'));
    	(X&gt;=5,X=&lt;6.9,write('Recuperação'));
    	(X&gt;=7,X=&lt;10,write('Aprovado'))
    ).

</div>

<div class="nb-cell query" name="q12">
status(joao).
</div>

<div class="nb-cell program" name="p8">
imc(Peso,Altura):-X is Peso/(Altura*Altura),
    write('Seu imc é: '),write(X).
</div>

<div class="nb-cell query" name="q13">
imc(85,1.90).
</div>

<div class="nb-cell program" name="p10">
fatorial(0,1).
fatorial(N,F):-
    N&gt;0,
    N1 is N-1,
    fatorial(N1,F1),
    F is N*F1.
    
</div>

<div class="nb-cell query" name="q16">
fatorial(6,X).
</div>

<div class="nb-cell program" name="p12">
animal(urso).
animal(peixe).
animal(peixinho).
animal(lince).
animal(raposa).
animal(coelho).
animal(veado).
animal(guaxinim).
planta(alga).
planta(grama).
come(urso,peixe).
come(lince,veado).
come(urso,raposa).
come(urso,veado).
come(peixe,peixinho).
come(peixinho,alga).
come(guaxinim,peixe).
come(raposa,coelho).
come(coelho,grama).
come(veado,grama).
come(urso,guaxinim).
cadeia(X,Y):-animal(X),come(Y,X).
cadeia(X,Y):-come(Y,A),cadeia(X,A).
</div>

<div class="nb-cell query" name="q17">
cadeia(veado,X).
</div>

<div class="nb-cell program" name="p11">
func(N,2):-N=1.
func(N,Result):-N&gt;=2,
    N1 is N-1,
    func(N1,Result1),
    Result is Result1 - 3*(N*N).
</div>

<div class="nb-cell query" name="q18">
func(3,X).
</div>

<div class="nb-cell program" name="p13">

</div>

</div>
